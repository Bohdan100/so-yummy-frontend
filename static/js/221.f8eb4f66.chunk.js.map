{"version":3,"file":"static/js/221.f8eb4f66.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { selectIsLoading } from 'redux/Auth/authSelectors';\nimport { register } from 'redux/Auth/authOperations';\nimport {\n  registerValidationSchema,\n  ErrorStatus,\n  getPassErrorStatus,\n} from '../../helpers';\nimport { useAuth } from '../../hooks';\nimport { setError } from '../../redux/Auth/authSlice';\n\nimport {\n  UserIconStyled,\n  EmailIconStyled,\n  LockIconStyled,\n  ErrorIconStyled,\n  CheckIconStyled,\n  PassWarnIconStyled,\n  PassErrorIconStyled,\n  PassValidIconStyled,\n} from '../../components/AuthIcons';\n\nimport {\n  Container,\n  Label,\n  Input,\n  StyledForm,\n  Title,\n  InputContainer,\n  Button,\n  StyledLink,\n  StatusBox,\n  ErrorBox,\n  TitleContainer,\n  ShowPasswordBtn,\n  PassIconBox,\n  GoogleIcon,\n  GoogleLink,\n} from './RegisterForm.styled';\n\nconst RegisterForm = () => {\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const { error } = useAuth();\n\n  useEffect(() => {\n    if (error !== null) {\n      setTimeout(() => {\n        dispatch(setError(null));\n      }, 5000);\n    }\n  }, [dispatch, error]);\n\n  const handleSubmitForm = ({ name, email, password }, { resetForm }) => {\n    dispatch(register({ name, email, password })).then(\n      res => !res.error && resetForm()\n    );\n  };\n\n  const statusIcon = {\n    valid: <CheckIconStyled />,\n    inValid: <ErrorIconStyled />,\n    notSecure: <PassWarnIconStyled />,\n  };\n\n  const passStatusIcon = {\n    valid: <PassValidIconStyled />,\n    inValid: <PassErrorIconStyled />,\n    notSecure: <PassWarnIconStyled />,\n  };\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={handleSubmitForm}\n        validationSchema={registerValidationSchema}\n        validateOnBlur\n      >\n        {({ errors, touched, isValid, dirty }) => (\n          <StyledForm>\n            <TitleContainer>\n              <Title>Registration</Title>\n              {error && <ErrorBox>{ErrorStatus[error]}</ErrorBox>}\n            </TitleContainer>\n            <InputContainer>\n              <Label htmlFor=\"name\">\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  disabled={isLoading}\n                  color={touched.name && getPassErrorStatus(errors.name, dirty)}\n                />\n                <UserIconStyled\n                  color={touched.name && getPassErrorStatus(errors.name, dirty)}\n                />\n                {touched.name &&\n                  statusIcon[getPassErrorStatus(errors.name, dirty)]}\n                {errors.name && touched.name ? (\n                  <StatusBox>{errors.name}</StatusBox>\n                ) : null}\n              </Label>\n              <Label htmlFor=\"email\">\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  disabled={isLoading}\n                  color={\n                    touched.email && getPassErrorStatus(errors.email, dirty)\n                  }\n                />\n                <EmailIconStyled\n                  color={\n                    touched.email && getPassErrorStatus(errors.email, dirty)\n                  }\n                />\n                {touched.email &&\n                  statusIcon[getPassErrorStatus(errors.email, dirty)]}\n                {errors.email && touched.email ? (\n                  <StatusBox>{errors.email}</StatusBox>\n                ) : null}\n              </Label>\n              <Label htmlFor=\"password\">\n                <Input\n                  type={isShowPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  disabled={isLoading}\n                  color={\n                    touched.password &&\n                    getPassErrorStatus(errors.password, dirty)\n                  }\n                />\n                <LockIconStyled\n                  color={\n                    touched.password &&\n                    getPassErrorStatus(errors.password, dirty)\n                  }\n                />\n                <PassIconBox>\n                  <ShowPasswordBtn\n                    type=\"button\"\n                    onClick={() => setIsShowPassword(!isShowPassword)}\n                  >\n                    {isShowPassword ? (\n                      <AiOutlineEye size=\"24px\" />\n                    ) : (\n                      <AiOutlineEyeInvisible size=\"24px\" />\n                    )}\n                  </ShowPasswordBtn>\n                  {touched.password &&\n                    passStatusIcon[getPassErrorStatus(errors.password, dirty)]}\n                </PassIconBox>\n                <StatusBox\n                  color={\n                    touched.password &&\n                    getPassErrorStatus(errors.password, dirty)\n                  }\n                >\n                  {((dirty && touched.password) ||\n                    (!dirty && touched.password && errors.password)) &&\n                    (errors.password || 'Password is secure')}\n                </StatusBox>\n              </Label>\n            </InputContainer>\n            <GoogleLink to=\"https://so-yummy-98ev.onrender.com/api/auth/google\">\n              <GoogleIcon />\n            </GoogleLink>\n            <Button\n              type=\"submit\"\n              name=\"button\"\n              disabled={isLoading || !isValid || !dirty}\n            >\n              Sign up\n            </Button>\n            <StyledLink to=\"/signin\">Sign In</StyledLink>\n          </StyledForm>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from '../../components/RegisterForm';\nimport AuthBody from '../../components/AuthBody';\n\n\nconst RegisterPage = () => {\n  return (\n    <AuthBody><RegisterForm /></AuthBody>\n  )\n};\n\nexport default RegisterPage;\n"],"names":["useState","isShowPassword","setIsShowPassword","isLoading","useSelector","selectIsLoading","dispatch","useDispatch","error","useAuth","useEffect","setTimeout","setError","statusIcon","valid","inValid","notSecure","passStatusIcon","initialValues","name","email","password","onSubmit","resetForm","register","then","res","validationSchema","registerValidationSchema","validateOnBlur","errors","touched","isValid","dirty","ErrorStatus","htmlFor","type","placeholder","disabled","color","getPassErrorStatus","onClick","size","to","AuthBody"],"sourceRoot":""}